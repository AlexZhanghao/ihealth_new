#pragma once
#include"passive_control.h"
#include "boundarydetection.h"
#include "control_card.h"
#include"active_control.h"
#include"emgcontrl.h"
#include "EyeMode.h"


class Robot {
public:
	Robot();
	~Robot();
	/************************************************************************/
	/*                           ?????????                                */
	/************************************************************************/
	//????????????index-?????????????
	void PassiveStartMove(int index);
	//?????????
	void PassiveStopMove();
	//?????????
	void PassiveBeginRecord();
	//???????
	void PassiveStopRecord();
	// ???????????¦Á??????
	void PassiveGetCurrentMove(PassiveData& move);
	// ???????????????
	void PassiveGetCurrentRecord(PassiveData& teach);
	// ??????????????????
	void PassiveClearMovementSet();
	// ???????????????????????????????????
	void PassiveStoreCurrentRecord();
	// ????????????????
	void PassiveStoreMovement(const PassiveData& move);
	// ?????????????????????????
	bool PassiveIsBusy();
	// ????????????????????
	bool IsPassiveRecording();

	/************************************************************************/
	/*                           ?????????                                */
	/************************************************************************/
	//??????????
	void ActiveStartMove(int id);
	//???????????
	void ActiveStopMove();
	//????????-??????
	double GetGripStrength();
	bool	IsFire();
	void	GetPlanePos(short w, short h, double XY[2]);
	// ????????????—¨?????????XY
	void	CalculateRagPos(double XY[2]);
	void	SetDamping(float FC=0.1);
	void    SetPressureSensorOn();
	void    SetPressureSensorOff();

	/************************************************************************/
	/*                           sEMG?????                                */
	/************************************************************************/
	bool EMGIsMove();
	//???EMG???
	void EMGStartMove();
	//??EMG???
	void EMGStopMove();
	//???EMG???-???????index-??????????0??1??2??3
	double EMGGetSignal(int index = 0);

	/************************************************************************/
	/*                           ????????                                */
	/************************************************************************/
	//????????-??????,0-?¼@??????1-???????(??????????????) 
	void enterEyeMode(); // call it while enter eye mode.
	void exitEyeMode();  // call it while enter eye mode.
	void getLeftRGB24(unsigned char* data, int _width, int _height);  // get image data of left eye
	void getRightRGB24(unsigned char* data, int _width, int _height); // get image data of right eye
	void startEyeMove(); // call it while clicking the start
	void stopEyeMove();  // call it while clicking the stop
	void setEyeVel(double factor); // set velocity
	void eyeCalibrate(); // call it before startEyeControl.

	//??¦Ë
	void resetPos();
	void stopResetPos();

	void setWindow(HWND hWnd);
public:
	PassiveControl *pasvMode;//??????????
	boundaryDetection *bDetect;//?????
	ActiveControl *activeCtrl;
	emgcontrl *EMGContrl;
	EyeMode *eyeModeCtl;
	
	HWND m_hWnd = NULL;
	bool m_isPasvModeStart;
	bool m_isActiveModeStart;
	bool m_isEmgModeStart;
};

void getSensorData(bool Travel_Switch[4]);